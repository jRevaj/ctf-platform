# Generated by Django 5.1.3 on 2025-03-25 21:43

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChallengeTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('folder', models.CharField(help_text='Folder name in game-templates directory', max_length=128, null=True, unique=True)),
                ('name', models.CharField(max_length=64)),
                ('title', models.CharField(blank=True, max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('docker_compose', models.TextField(blank=True, null=True)),
                ('containers_config', models.JSONField(blank=True, default=dict, null=True)),
                ('networks_config', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('role', models.CharField(choices=[('blue', 'Blue'), ('red', 'Red')], default='blue', max_length=8)),
                ('score', models.IntegerField(default=0)),
                ('red_points', models.IntegerField(default=0)),
                ('blue_points', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=128, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('ssh_public_key', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='ctf.team')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='ChallengeDeployment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deployments', to='ctf.challengetemplate')),
            ],
        ),
        migrations.CreateModel(
            name='GameContainer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('template_name', models.CharField(blank=True, max_length=128, null=True)),
                ('docker_id', models.CharField(max_length=128, unique=True)),
                ('status', models.CharField(choices=[('created', 'Created'), ('running', 'Running'), ('stopped', 'Stopped'), ('deleted', 'Deleted'), ('error', 'Error')], max_length=16)),
                ('port', models.IntegerField(blank=True, null=True)),
                ('services', models.JSONField(default=list)),
                ('access_rotation_date', models.DateTimeField()),
                ('is_entrypoint', models.BooleanField(default=False)),
                ('deployment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='containers', to='ctf.challengedeployment')),
                ('blue_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blue_containers', to='ctf.team')),
                ('red_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='red_containers', to='ctf.team')),
            ],
            options={
                'verbose_name': 'Game Container',
                'verbose_name_plural': 'Game Containers',
                'ordering': ['-access_rotation_date'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeNetworkConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('subnet', models.GenericIPAddressField()),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='networks', to='ctf.challengedeployment')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ctf.challengetemplate')),
                ('containers', models.ManyToManyField(related_name='challenge_network_configs', to='ctf.gamecontainer')),
            ],
        ),
        migrations.CreateModel(
            name='GameSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Descriptive name for this game session', max_length=128, unique=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('rotation_period', models.IntegerField(help_text='Period in days')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('active', 'Active'), ('completed', 'Completed')], default='planned', max_length=16)),
                ('template', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='game_sessions', to='ctf.challengetemplate')),
            ],
            options={
                'verbose_name': 'Game Session',
                'verbose_name_plural': 'Game Sessions',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Flag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=128, unique=True)),
                ('points', models.IntegerField(default=100)),
                ('placeholder', models.CharField(max_length=128, null=True)),
                ('hint', models.TextField(null=True)),
                ('is_captured', models.BooleanField(default=False)),
                ('captured_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('container', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flags', to='ctf.gamecontainer')),
                ('captured_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='captured_flags', to='ctf.team')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_flags', to='ctf.team')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContainerAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('blue', 'Blue'), ('red', 'Red')], max_length=8)),
                ('access_type', models.CharField(max_length=64)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('session_length', models.DurationField(blank=True, help_text='Duration of session if applicable', null=True)),
                ('commands_executed', models.TextField(blank=True, help_text='Commands executed during session', null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='container_access', to=settings.AUTH_USER_MODEL)),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_records', to='ctf.gamecontainer')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='container_access_history', to='ctf.team')),
            ],
            options={
                'verbose_name': 'Container Access Record',
                'verbose_name_plural': 'Container Access Records',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='TeamAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('blue', 'Blue'), ('red', 'Red')], default='blue', max_length=8)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_assignments', to='ctf.challengedeployment')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_assignments', to='ctf.gamesession')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_assignments', to='ctf.team')),
            ],
            options={
                'verbose_name': 'Team Assignment',
                'verbose_name_plural': 'Team Assignments',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='GamePhase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('active', 'Active'), ('completed', 'Completed')], default='planned', max_length=16)),
                ('phase_number', models.CharField(choices=[('1', 'Blue'), ('2', 'Red')], default='1', max_length=8)),
                ('start_date', models.DateTimeField(help_text='Start date of this game phase')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='phases', to='ctf.challengetemplate')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phases', to='ctf.gamesession')),
            ],
            options={
                'verbose_name': 'Game Phase',
                'verbose_name_plural': 'Game Phases',
                'ordering': ['phase_number'],
                'unique_together': {('session', 'phase_number')},
            },
        ),
        migrations.AddIndex(
            model_name='gamecontainer',
            index=models.Index(fields=['docker_id'], name='ctf_gamecon_docker__cf0582_idx'),
        ),
        migrations.AddIndex(
            model_name='gamecontainer',
            index=models.Index(fields=['status'], name='ctf_gamecon_status_42867e_idx'),
        ),
        migrations.AddIndex(
            model_name='flag',
            index=models.Index(fields=['value'], name='ctf_flag_value_6bc6ac_idx'),
        ),
        migrations.AddIndex(
            model_name='containeraccess',
            index=models.Index(fields=['container', 'start_time'], name='ctf_contain_contain_43a34b_idx'),
        ),
        migrations.AddIndex(
            model_name='containeraccess',
            index=models.Index(fields=['team', 'start_time'], name='ctf_contain_team_id_95711b_idx'),
        ),
        migrations.AddIndex(
            model_name='containeraccess',
            index=models.Index(fields=['user', 'start_time'], name='ctf_contain_user_id_956fa8_idx'),
        ),
        migrations.AddIndex(
            model_name='containeraccess',
            index=models.Index(fields=['access_type'], name='ctf_contain_access__75289c_idx'),
        ),
        migrations.AddIndex(
            model_name='teamassignment',
            index=models.Index(fields=['session', 'team'], name='ctf_teamass_session_5e0bc0_idx'),
        ),
        migrations.AddIndex(
            model_name='teamassignment',
            index=models.Index(fields=['session', 'deployment'], name='ctf_teamass_session_5c7e68_idx'),
        ),
    ]
