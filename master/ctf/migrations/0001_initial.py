# Generated by Django 5.2 on 2025-05-03 16:13

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChallengeTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('folder', models.CharField(help_text='Folder name in game-templates directory', max_length=128, null=True, unique=True)),
                ('name', models.CharField(max_length=64)),
                ('title', models.CharField(default='', max_length=256)),
                ('description', models.TextField(blank=True, default='')),
                ('docker_compose', models.TextField(blank=True, default='')),
                ('containers_config', models.JSONField(blank=True, default=dict, null=True)),
                ('networks_config', models.JSONField(blank=True, default=dict, null=True)),
            ],
            options={
                'verbose_name': 'Challenge Template',
                'verbose_name_plural': 'Challenge Templates',
            },
        ),
        migrations.CreateModel(
            name='GlobalSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_team_size', models.PositiveIntegerField(default=3, help_text='Maximum number of players allowed in a team')),
                ('number_of_tiers', models.PositiveIntegerField(default=3, help_text='Number of tiers to use in matchmaking')),
                ('allow_team_changes', models.BooleanField(default=True, help_text='Whether players can change teams outside of games')),
                ('enable_auto_container_shutdown', models.BooleanField(default=True, help_text='Whether to automatically shut down inactive containers')),
                ('inactive_container_timeout', models.PositiveIntegerField(default=30, help_text='Number of minutes to wait before stopping an inactive container')),
                ('previous_targets_check_count', models.PositiveIntegerField(default=1, help_text='Number of previous sessions to check when preventing teams from attacking recent targets')),
            ],
            options={
                'verbose_name': 'Global Settings',
                'verbose_name_plural': 'Global Settings',
            },
        ),
        migrations.CreateModel(
            name='ChallengeDeployment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('last_activity', models.DateTimeField(default=django.utils.timezone.now)),
                ('has_active_connections', models.BooleanField(default=False)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deployments', to='ctf.challengetemplate')),
            ],
            options={
                'verbose_name': 'Challenge Deployment',
                'verbose_name_plural': 'Challenge Deployments',
            },
        ),
        migrations.CreateModel(
            name='GameContainer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('template_name', models.CharField(blank=True, default='', max_length=128)),
                ('docker_id', models.CharField(max_length=128, unique=True)),
                ('status', models.CharField(choices=[('created', 'Created'), ('running', 'Running'), ('stopped', 'Stopped'), ('deleted', 'Deleted'), ('error', 'Error')], default='created', max_length=16)),
                ('port', models.IntegerField(blank=True, null=True)),
                ('services', models.JSONField(default=list)),
                ('is_entrypoint', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_activity', models.DateTimeField(default=django.utils.timezone.now)),
                ('blue_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blue_containers', to='accounts.team')),
                ('deployment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='containers', to='ctf.challengedeployment')),
                ('red_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='red_containers', to='accounts.team')),
            ],
            options={
                'verbose_name': 'Game Container',
                'verbose_name_plural': 'Game Containers',
            },
        ),
        migrations.CreateModel(
            name='Flag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=128, unique=True)),
                ('points', models.IntegerField(default=100)),
                ('placeholder', models.CharField(blank=True, default='', max_length=128)),
                ('hint', models.TextField(blank=True, default='')),
                ('is_captured', models.BooleanField(default=False)),
                ('captured_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('captured_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='captured_flags', to='accounts.team')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_flags', to='accounts.team')),
                ('container', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flags', to='ctf.gamecontainer')),
            ],
            options={
                'verbose_name': 'Flag',
                'verbose_name_plural': 'Flags',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeNetworkConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=128)),
                ('subnet', models.GenericIPAddressField()),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='networks', to='ctf.challengedeployment')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ctf.challengetemplate')),
                ('containers', models.ManyToManyField(related_name='challenge_network_configs', to='ctf.gamecontainer')),
            ],
            options={
                'verbose_name': 'Challenge Network Config',
                'verbose_name_plural': 'Challenge Network Configs',
            },
        ),
        migrations.CreateModel(
            name='GameSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Descriptive name for this game session', max_length=128, unique=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(null=True)),
                ('rotation_period', models.PositiveIntegerField(help_text='Period in days')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('active', 'Active'), ('completed', 'Completed')], default='planned', max_length=16)),
                ('enable_time_restrictions', models.BooleanField(default=False, help_text='Whether to enable time restrictions for accessing deployments')),
                ('max_blue_team_time', models.PositiveIntegerField(default=120, help_text='Maximum time in minutes that a blue team can spend securing a deployment (0 means no limit)')),
                ('max_red_team_time', models.PositiveIntegerField(default=0, help_text='Maximum time in minutes that a red team can spend attacking a deployment (0 means no limit)')),
                ('template', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='game_sessions', to='ctf.challengetemplate')),
            ],
            options={
                'verbose_name': 'Game Session',
                'verbose_name_plural': 'Game Sessions',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='GamePhase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('active', 'Active'), ('completed', 'Completed')], default='planned', max_length=16)),
                ('phase_name', models.CharField(choices=[('blue', 'Blue'), ('red', 'Red')], default='blue', max_length=8)),
                ('start_date', models.DateTimeField(help_text='Start date of this game phase')),
                ('end_date', models.DateTimeField(help_text='End date of this game phase')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phases', to='ctf.gamesession')),
            ],
            options={
                'verbose_name': 'Game Phase',
                'verbose_name_plural': 'Game Phases',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='TeamAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('role', models.CharField(choices=[('blue', 'Blue'), ('red', 'Red')], default='blue', max_length=8)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='ctf.challengedeployment')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_assignments', to='ctf.gamesession')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='accounts.team')),
            ],
            options={
                'verbose_name': 'Team Assignment',
                'verbose_name_plural': 'Team Assignments',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='DeploymentAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(blank=True, max_length=256, null=True)),
                ('access_type', models.CharField(max_length=50)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('containers', models.JSONField(default=list, help_text='List of container IDs accessed during this session')),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_records', to='ctf.challengedeployment')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.team')),
            ],
            options={
                'verbose_name': 'Deployment Access',
                'verbose_name_plural': 'Deployment Accesses',
                'ordering': ['-start_time'],
                'indexes': [models.Index(fields=['deployment', 'is_active'], name='ctf_deploym_deploym_61bbca_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='gamecontainer',
            index=models.Index(fields=['docker_id'], name='ctf_gamecon_docker__cf0582_idx'),
        ),
        migrations.AddIndex(
            model_name='gamecontainer',
            index=models.Index(fields=['status'], name='ctf_gamecon_status_42867e_idx'),
        ),
        migrations.AddIndex(
            model_name='gamecontainer',
            index=models.Index(fields=['last_activity'], name='ctf_gamecon_last_ac_69c9db_idx'),
        ),
        migrations.AddIndex(
            model_name='flag',
            index=models.Index(fields=['value'], name='ctf_flag_value_6bc6ac_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='gamephase',
            unique_together={('session', 'phase_name')},
        ),
        migrations.AddIndex(
            model_name='teamassignment',
            index=models.Index(fields=['session', 'team'], name='ctf_teamass_session_5e0bc0_idx'),
        ),
        migrations.AddIndex(
            model_name='teamassignment',
            index=models.Index(fields=['session', 'deployment'], name='ctf_teamass_session_5c7e68_idx'),
        ),
    ]
