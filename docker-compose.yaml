services:
  db:
    image: postgres:latest
    container_name: db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h ${POSTGRES_HOST} -p ${POSTGRES_PORT}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - infra_net

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - infra_net

  master:
    build:
      context: ./master
      dockerfile: Dockerfile
    container_name: master
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./master:/app
    user: root
    env_file:
      - .env
    environment:
      - DJANGO_ENVIRONMENT=development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py init_network &&
        python manage.py init_admin &&
        python manage.py populate_test_users &&
        python manage.py runserver 0.0.0.0:8000
      "
    networks:
      - infra_net

  celery_worker:
    build:
      context: ./master
      dockerfile: Dockerfile
    container_name: celery_worker
    command: >
      sh -c "
        echo 'Waiting for Django to be ready...' &&
        while ! curl -s http://master:8000/api/health/ > /dev/null; do
          echo 'Django is not ready yet...' &&
          sleep 5
        done &&
        echo 'Django is ready! Starting Celery worker...' &&
        celery -A core worker --loglevel=info --concurrency=4 -E
      "
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    environment:
      - DJANGO_ENVIRONMENT=development
    depends_on:
      - master
      - redis
    env_file:
      - .env
    networks:
      - infra_net

  celery_beat:
    build:
      context: ./master
      dockerfile: Dockerfile
    container_name: celery_beat
    command: >
      sh -c "
        echo 'Waiting for Django to be ready...' &&
        while ! curl -s http://master:8000/api/health/ > /dev/null; do
          echo 'Django is not ready yet...' &&
          sleep 5
        done &&
        echo 'Django is ready! Starting Celery beat...' &&
        celery -A core beat --loglevel=info
      "
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    environment:
      - DJANGO_ENVIRONMENT=development
    depends_on:
      - master
      - redis
    env_file:
      - .env
    networks:
      - infra_net

volumes:
  postgres_data:


networks:
  infra_net:
    driver: bridge
